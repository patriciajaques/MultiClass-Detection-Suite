import pytest
import pandas as pd
import numpy as np

@pytest.fixture
def sample():
    # Gerar dados para 10 inst√¢ncias
    data = {
        "id_log": np.random.choice(range(10000, 100000), 10, replace=False),
        "aluno": [1, 1, 1, 2, 2, 2, 3, 3, 3, 3],
        "grupo": np.random.choice([1, 2, 3, 4], 10),
        "num_dia": np.random.choice(range(1, 11), 10, replace=False),
        "num_log": np.random.choice(range(1, 21), 10, replace=False),
        "log_type": np.random.choice(["step_verification", "user_idle", "hint_request", "mouse_click"], 10),
        "ultimo_passo_correto": np.random.choice([0, 1], 10),
        "verificado_com_mouse": np.random.choice([0, 1], 10),
        "verificado_com_teclado": np.random.choice([0, 1], 10),
        "idle_time_acumulado": np.random.choice(range(0, 10), 10, replace=False),
        "num_click_acumulado": np.random.choice(range(0, 10), 10, replace=False),
        "num_click_passo": np.random.choice(range(0, 10), 10, replace=False),
        "num_click_eq": np.random.choice(range(0, 10), 10, replace=False),
        "type_step_verification": np.random.choice([0, 1], 10),
        "type_click": np.random.choice([0, 1], 10),
        "type_typing": np.random.choice([0, 1], 10),
        "type_mouse_stop": np.random.choice([0, 1], 10),
        "type_mouse_fast": np.random.choice([0, 1], 10),
        "type_hint_request": np.random.choice([0, 1], 10),
        "type_user_idle": np.random.choice([0, 1], 10),
        "type_window_lost_focus": np.random.choice([0, 1], 10),
        "type_window_gained_focus": np.random.choice([0, 1], 10),
        "type_window_resize": np.random.choice([0, 1], 10),
        "type_left_window": np.random.choice([0, 1], 10),
        "type_entered_window": np.random.choice([0, 1], 10),
        "type_start_out_of_sinc_server_time": np.random.choice([0, 1], 10),
        "type_user_log_out": np.random.choice([0, 1], 10),
        "click_resolucao": np.random.choice([0, 1], 10),
        "click_planos": np.random.choice([0, 1], 10),
        "click_atalhos": np.random.choice([0, 1], 10),
        "click_bugs": np.random.choice([0, 1], 10),
        "click_gamificacao": np.random.choice([0, 1], 10),
        "click_dicas": np.random.choice([0, 1], 10),
        "click_erros": np.random.choice([0, 1], 10),
        "click_notificacoes": np.random.choice([0, 1], 10),
        "click_sistema": np.random.choice([0, 1], 10),
        "click_emocoes": np.random.choice([0, 1], 10),
        "click_indefinidos": np.random.choice([0, 1], 10),
        "pontuacao": np.random.choice(range(0, 10), 10, replace=False),
        "cat_muito_facil": np.random.choice([0, 1], 10),
        "cat_facil_1": np.random.choice([0, 1], 10),
        "cat_facil_2": np.random.choice([0, 1], 10),
        "cat_facil_3": np.random.choice([0, 1], 10),
        "cat_facil_4": np.random.choice([0, 1], 10),
        "cat_medio_1": np.random.choice([0, 1], 10),
        "cat_medio_2": np.random.choice([0, 1], 10),
        "cat_medio_3": np.random.choice([0, 1], 10),
        "cat_dificil_1": np.random.choice([0, 1], 10),
        "cat_dificil_2": np.random.choice([0, 1], 10),
        "cat_dificil_3": np.random.choice([0, 1], 10),
        "cat_dificil_4": np.random.choice([0, 1], 10),
        "num_passos_equacao": np.random.choice(range(10, 30), 10, replace=False),
        "num_passos_errados_eq": np.random.choice(range(0, 10), 10, replace=False),
        "num_passos_errados_seguidos_eq": np.random.choice(range(0, 10), 10, replace=False),
        "num_passos_corretos_eq": np.random.choice(range(10, 50), 10, replace=False),
        "efetividade_passos_eq": np.random.uniform(0.5, 1.0, 10),
        "tempo_equacao": np.random.uniform(100, 500, 10),
        "tempo_passo": np.random.uniform(50, 300, 10),
        "tempo_medio_eq_diario": np.random.uniform(10, 200, 10),
        "tempo_medio_passo_diario": np.random.uniform(10, 200, 10),
        "num_passos_diario": np.random.choice(range(0, 10), 10, replace=False),
        "num_passos_corretos_diario": np.random.uniform(5, 20, 10),
        "num_passos_errados_diario": np.random.uniform(0, 5, 10),
        "num_equacoes_resolvidas_diario": np.random.uniform(20, 50, 10),
        "efetividade_passos_eq_diario": np.random.uniform(0.5, 1.0, 10),
        "tempo_medio_eq_diario_turma": np.random.uniform(20, 30, 10),
        "tempo_medio_passo_diario_turma": np.random.uniform(20, 30, 10),
        "media_num_passos_diario_turma": np.random.uniform(1, 10, 10),
        "media_num_passos_corretos_diario_turma": np.random.uniform(10, 15, 10),
        "media_num_passos_errados_diario_turma": np.random.uniform(0.5, 1.5, 10),
        "media_num_equacoes_resolvidas_diario_turma": np.random.uniform(400, 500, 10),
        "media_efetividade_passos_eq_turma": np.random.uniform(100, 200, 10),
        "tempo_medio_eq_total": np.random.uniform(10, 200, 10),
        "tempo_medio_passo_total": np.random.uniform(10, 200, 10),
        "num_passos_total": np.random.choice(range(0, 10), 10, replace=False),
        "num_passos_corretos_total": np.random.uniform(5, 20, 10),
        "num_passos_errados_total": np.random.uniform(0, 5, 10),
        "num_equacoes_resolvidas_total": np.random.uniform(20, 50, 10),
        "efetividade_passos_eq_total": np.random.uniform(0.5, 1.0, 10),
        "tempo_medio_eq_total_turma": np.random.uniform(20, 30, 10),
        "tempo_medio_passo_total_turma": np.random.uniform(20, 30, 10),
        "media_num_passos_total_turma": np.random.uniform(1, 10, 10),
        "media_num_passos_corretos_total_turma": np.random.uniform(10, 15, 10),
        "media_num_passos_errados_total_turma": np.random.uniform(0.5, 1.5, 10),
        "media_num_equacoes_resolvidas_total_turma": np.random.uniform(400, 500, 10),
        "media_efetividade_passos_eq_total_turma": np.random.uniform(100, 200, 10),
        "eq_AD": np.random.choice([0, 1], 10),
        "eq_AF": np.random.choice([0, 1], 10),
        "eq_DM": np.random.choice([0, 1], 10),
        "eq_DV": np.random.choice([0, 1], 10),
        "eq_MF": np.random.choice([0, 1], 10),
        "eq_MM": np.random.choice([0, 1], 10),
        "eq_MT": np.random.choice([0, 1], 10),
        "eq_OI": np.random.choice([0, 1], 10),
        "eq_SB": np.random.choice([0, 1], 10),
        "eq_SP": np.random.choice([0, 1], 10),
        "eq_AD_acerto_clip": np.random.choice([0, 1], 10),
        "eq_AF_acerto_clip": np.random.choice([0, 1], 10),
        "eq_DM_acerto_clip": np.random.choice([0, 1], 10),
        "eq_DV_acerto_clip": np.random.choice([0, 1], 10),
        "eq_MF_acerto_clip": np.random.choice([0, 1], 10),
        "eq_MM_acerto_clip": np.random.choice([0, 1], 10),
        "eq_MT_acerto_clip": np.random.choice([0, 1], 10),
        "eq_OI_acerto_clip": np.random.choice([0, 1], 10),
        "eq_SB_acerto_clip": np.random.choice([0, 1], 10),
        "eq_SP_acerto_clip": np.random.choice([0, 1], 10),
        "eq_AD_acerto_diario": np.random.choice([0, 1], 10),
        "eq_AF_acerto_diario": np.random.choice([0, 1], 10),
        "eq_DM_acerto_diario": np.random.choice([0, 1], 10),
        "eq_DV_acerto_diario": np.random.choice([0, 1], 10),
        "eq_MF_acerto_diario": np.random.choice([0, 1], 10),
        "eq_MM_acerto_diario": np.random.choice([0, 1], 10),
        "eq_MT_acerto_diario": np.random.choice([0, 1], 10),
        "eq_OI_acerto_diario": np.random.choice([0, 1], 10),
        "eq_SB_acerto_diario": np.random.choice([0, 1], 10),
        "eq_SP_acerto_diario": np.random.choice([0, 1], 10),
        "eq_AD_acerto_total": np.random.choice([0, 1], 10),
        "eq_AF_acerto_total": np.random.choice([0, 1], 10),
        "eq_DM_acerto_total": np.random.choice([0, 1], 10),
        "eq_DV_acerto_total": np.random.choice([0, 1], 10),
        "eq_MF_acerto_total": np.random.choice([0, 1], 10),
        "eq_MM_acerto_total": np.random.choice([0, 1], 10),
        "eq_MT_acerto_total": np.random.choice([0, 1], 10),
        "eq_OI_acerto_total": np.random.choice([0, 1], 10),
        "eq_SB_acerto_total": np.random.choice([0, 1], 10),
        "eq_SP_acerto_total": np.random.choice([0, 1], 10),
        "eq_AD_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_AF_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_DM_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_DV_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_MF_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_MM_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_MT_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_OI_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_SB_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_SP_acerto_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_AD_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_AF_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_DM_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_DV_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_MF_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_MM_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_MT_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_OI_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_SB_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_SP_acerto_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_AD_erro_clip": np.random.choice([0, 1], 10),
        "eq_AF_erro_clip": np.random.choice([0, 1], 10),
        "eq_DM_erro_clip": np.random.choice([0, 1], 10),
        "eq_DV_erro_clip": np.random.choice([0, 1], 10),
        "eq_MF_erro_clip": np.random.choice([0, 1], 10),
        "eq_MM_erro_clip": np.random.choice([0, 1], 10),
        "eq_MT_erro_clip": np.random.choice([0, 1], 10),
        "eq_OI_erro_clip": np.random.choice([0, 1], 10),
        "eq_SB_erro_clip": np.random.choice([0, 1], 10),
        "eq_SP_erro_clip": np.random.choice([0, 1], 10),
        "eq_AD_erro_diario": np.random.choice([0, 1], 10),
        "eq_AF_erro_diario": np.random.choice([0, 1], 10),
        "eq_DM_erro_diario": np.random.choice([0, 1], 10),
        "eq_DV_erro_diario": np.random.choice([0, 1], 10),
        "eq_MF_erro_diario": np.random.choice([0, 1], 10),
        "eq_MM_erro_diario": np.random.choice([0, 1], 10),
        "eq_MT_erro_diario": np.random.choice([0, 1], 10),
        "eq_OI_erro_diario": np.random.choice([0, 1], 10),
        "eq_SB_erro_diario": np.random.choice([0, 1], 10),
        "eq_SP_erro_diario": np.random.choice([0, 1], 10),
        "eq_AD_erro_total": np.random.choice([0, 1], 10),
        "eq_AF_erro_total": np.random.choice([0, 1], 10),
        "eq_DM_erro_total": np.random.choice([0, 1], 10),
        "eq_DV_erro_total": np.random.choice([0, 1], 10),
        "eq_MF_erro_total": np.random.choice([0, 1], 10),
        "eq_MM_erro_total": np.random.choice([0, 1], 10),
        "eq_MT_erro_total": np.random.choice([0, 1], 10),
        "eq_OI_erro_total": np.random.choice([0, 1], 10),
        "eq_SB_erro_total": np.random.choice([0, 1], 10),
        "eq_SP_erro_total": np.random.choice([0, 1], 10),
        "eq_AD_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_AF_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_DM_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_DV_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_MF_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_MM_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_MT_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_OI_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_SB_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_SP_erro_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_AD_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_AF_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_DM_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_DV_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_MF_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_MM_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_MT_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_OI_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_SB_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_SP_erro_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_AD_fator_clip": np.random.choice([0, 1], 10),
        "eq_AF_fator_clip": np.random.choice([0, 1], 10),
        "eq_DM_fator_clip": np.random.choice([0, 1], 10),
        "eq_DV_fator_clip": np.random.choice([0, 1], 10),
        "eq_MF_fator_clip": np.random.choice([0, 1], 10),
        "eq_MM_fator_clip": np.random.choice([0, 1], 10),
        "eq_MT_fator_clip": np.random.choice([0, 1], 10),
        "eq_OI_fator_clip": np.random.choice([0, 1], 10),
        "eq_SB_fator_clip": np.random.choice([0, 1], 10),
        "eq_SP_fator_clip": np.random.choice([0, 1], 10),
        "eq_AD_fator_diario": np.random.choice([0, 1], 10),
        "eq_AF_fator_diario": np.random.choice([0, 1], 10),
        "eq_DM_fator_diario": np.random.choice([0, 1], 10),
        "eq_DV_fator_diario": np.random.choice([0, 1], 10),
        "eq_MF_fator_diario": np.random.choice([0, 1], 10),
        "eq_MM_fator_diario": np.random.choice([0, 1], 10),
        "eq_MT_fator_diario": np.random.choice([0, 1], 10),
        "eq_OI_fator_diario": np.random.choice([0, 1], 10),
        "eq_SB_fator_diario": np.random.choice([0, 1], 10),
        "eq_SP_fator_diario": np.random.choice([0, 1], 10),
        "eq_AD_fator_total": np.random.choice([0, 1], 10),
        "eq_AF_fator_total": np.random.choice([0, 1], 10),
        "eq_DM_fator_total": np.random.choice([0, 1], 10),
        "eq_DV_fator_total": np.random.choice([0, 1], 10),
        "eq_MF_fator_total": np.random.choice([0, 1], 10),
        "eq_MM_fator_total": np.random.choice([0, 1], 10),
        "eq_MT_fator_total": np.random.choice([0, 1], 10),
        "eq_OI_fator_total": np.random.choice([0, 1], 10),
        "eq_SB_fator_total": np.random.choice([0, 1], 10),
        "eq_SP_fator_total": np.random.choice([0, 1], 10),
        "eq_AD_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_AF_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_DM_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_DV_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_MF_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_MM_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_MT_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_OI_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_SB_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_SP_fator_medio_diario_turma": np.random.choice([0, 1], 10),
        "eq_AD_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_AF_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_DM_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_DV_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_MF_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_MM_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_MT_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_OI_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_SB_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "eq_SP_fator_medio_total_turma": np.random.choice([0, 1], 10),
        "misc_EqPrim_Ad_Sin_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_OpPrim_Ad_Num_Inc_clip": np.random.choice([0, 1], 10),
        "misc_OI_Ad_Ad_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Ad_Num_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Simp_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Sin_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Num_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_OpPrim_Sb_Num_Inc_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Ad_Inc_clip": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Dv_Minus_clip": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Ad_clip": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Sb_clip": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Mt_Plus_clip": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Dv_Plus_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Mt_Num_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Mt_Sin_clip": np.random.choice([0, 1], 10),
        "misc_OI_Sb_Sb_clip": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Dv_Minus_clip": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Ad_clip": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Minus_Dv_Plus_clip": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Sb_clip": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Sb_clip": np.random.choice([0, 1], 10),
        "misc_EqSec_Distrib_MtTerm_clip": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Mt_Plus_clip": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Mt_Minus_clip": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Ad_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Mt_Inc_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Inc_clip": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Minus_Dv_Minus_clip": np.random.choice([0, 1], 10),
        "misc_EqSec_OpFrac_MMC_MtNumerador_clip": np.random.choice([0, 1], 10),
        "misc_EqPrim_Ad_Sin_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_OpPrim_Ad_Num_Inc_diario": np.random.choice([0, 1], 10),
        "misc_OI_Ad_Ad_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Ad_Num_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Simp_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Sin_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Num_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_OpPrim_Sb_Num_Inc_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Ad_Inc_diario": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Dv_Minus_diario": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Ad_diario": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Sb_diario": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Mt_Plus_diario": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Dv_Plus_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Mt_Num_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Mt_Sin_diario": np.random.choice([0, 1], 10),
        "misc_OI_Sb_Sb_diario": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Dv_Minus_diario": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Ad_diario": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Minus_Dv_Plus_diario": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Sb_diario": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Sb_diario": np.random.choice([0, 1], 10),
        "misc_EqSec_Distrib_MtTerm_diario": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Mt_Plus_diario": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Mt_Minus_diario": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Ad_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Mt_Inc_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Inc_diario": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Minus_Dv_Minus_diario": np.random.choice([0, 1], 10),
        "misc_EqSec_OpFrac_MMC_MtNumerador_diario": np.random.choice([0, 1], 10),
        "misc_EqPrim_Ad_Sin_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_OpPrim_Ad_Num_Inc_total": np.random.choice([0, 1], 10),
        "misc_OI_Ad_Ad_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_Ad_Num_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Simp_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Sin_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Num_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_OpPrim_Sb_Num_Inc_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_Ad_Inc_total": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Dv_Minus_total": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Ad_total": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Sb_total": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Mt_Plus_total": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Dv_Plus_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_Mt_Num_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_Mt_Sin_total": np.random.choice([0, 1], 10),
        "misc_OI_Sb_Sb_total": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Dv_Minus_total": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Ad_total": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Minus_Dv_Plus_total": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Plus_Sb_total": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Sb_total": np.random.choice([0, 1], 10),
        "misc_EqSec_Distrib_MtTerm_total": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Mt_Plus_total": np.random.choice([0, 1], 10),
        "misc_OI_Mt_Minus_Mt_Minus_total": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Plus_Ad_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_Mt_Inc_total": np.random.choice([0, 1], 10),
        "misc_EqPrim_Dv_Inc_total": np.random.choice([0, 1], 10),
        "misc_OI_Dv_Minus_Dv_Minus_total": np.random.choice([0, 1], 10),
        "misc_EqSec_OpFrac_MMC_MtNumerador_total": np.random.choice([0, 1], 10),
        "traco_amabilidade_fator": np.random.uniform(0, 1, 10),
        "traco_extrovercao_fator": np.random.uniform(0, 1, 10),
        "traco_conscienciosidade_fator": np.random.uniform(0, 1, 10),
        "traco_abertura_fator": np.random.uniform(0, 1, 10),
        "traco_neuroticismo_fator": np.random.uniform(0, 1, 10),
        "traco_amabilidade_cat": np.random.choice([0, 1, 2, 3], 10),
        "traco_extrovercao_cat": np.random.choice([0, 1, 2, 3], 10),
        "traco_conscienciosidade_cat": np.random.choice([0, 1, 2, 3], 10),
        "traco_abertura_cat": np.random.choice([0, 1, 2, 3], 10),
        "traco_neuroticismo_cat": np.random.choice([0, 1, 2, 3], 10),
        "estado_afetivo": np.random.choice(["ENGAGED CONCENTRATION", "CONFUSION", "FRUSTRATION", "BOREDOM"], 10),
        "estado_engajamento_concentrado": np.random.choice([0, 1], 10),
        "estado_confusao": np.random.choice([0, 1], 10),
        "estado_frustracao": np.random.choice([0, 1], 10),
        "estado_tedio": np.random.choice([0, 1], 10),
        "estado_indefinido": np.random.choice([0, 1], 10),
        "ultimo_estado_afetivo": np.random.choice(["ENGAGED CONCENTRATION", "CONFUSION", "FRUSTRATION", "BOREDOM"], 10),
        "ultimo_engajamento_concentrado": np.random.choice([0, 1], 10),
        "ultimo_confusao": np.random.choice([0, 1], 10),
        "ultimo_frustracao": np.random.choice([0, 1], 10),
        "ultimo_tedio": np.random.choice([0, 1], 10),
        "ultimo_estado_indefinido": np.random.choice([0, 1], 10),
        "comportamento": np.random.choice(["ON TASK", "OFF TASK", "ON SYSTEM", "INDEFINIDO"], 10),
        "comportamento_on_task": np.random.choice([0, 1], 10),
        "comportamento_on_task_conversation": np.random.choice([0, 1], 10),
        "comportamento_on_task_out": np.random.choice([0, 1], 10),
        "comportamento_off_task": np.random.choice([0, 1], 10),
        "comportamento_on_system": np.random.choice([0, 1], 10),
        "comportamento_indefinido": np.random.choice([0, 1], 10),
        "ultimo_comportamento": np.random.choice(["ON TASK", "OFF TASK", "ON SYSTEM", "INDEFINIDO"], 10),
        "ultimo_comportamento_on_task": np.random.choice([0, 1], 10),
        "ultimo_comportamento_on_task_conversation": np.random.choice([0, 1], 10),
        "ultimo_comportamento_on_task_out": np.random.choice([0, 1], 10),
        "ultimo_comportamento_off_task": np.random.choice([0, 1], 10),
        "ultimo_comportamento_on_system": np.random.choice([0, 1], 10),
        "ultimo_comportamento_indefinido": np.random.choice([0, 1], 10),
    }

    df = pd.DataFrame(data)
    return df

@pytest.fixture
def sample_shorter():
    # Criar dados de exemplo mais curtos
    data = {
        'feature1': np.random.rand(100),
        'feature2': np.random.rand(100),
        'feature3': np.random.rand(100),
        'target': np.random.choice([0, 1], size=100, p=[0.7, 0.3])
    }
    return pd.DataFrame(data)
